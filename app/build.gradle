apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
            'android/**/*.*', '**/*$[0-9].*', '**/ConnectivityHelper.*', '**/Constants.*',
            '**/PreferenceHelper.*', '**/ProgressBarHelper.*','**/entities/**'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}



androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.adictosalainformatica.kotlinclean"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField "String", "API_BASE_URL", "\"$debug_api_base_url\""
            buildConfigField "String", "API_URL", "\"$debug_api_url\""
            buildConfigField "String", "API_PORT", "\"$debug_api_port\""
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'API_BASE_URL', "\"$release_api_url\""
            buildConfigField "String", "API_URL", "\"$release_api_url\""
            buildConfigField 'String', 'API_PORT', "\"$release_api_port\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation "com.google.android.material:material:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestUtil 'androidx.test:orchestrator:1.1.0'

    testImplementation (
            rootProject.ext.dependencies.coroutinesTest,
            rootProject.ext.dependencies.mockk,
    )

    androidTestImplementation(
            rootProject.ext.dependencies.mockkAndroid
    )


    implementation "android.arch.persistence.room:runtime:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"

    implementation(
            rootProject.ext.dependencies.picasso,
            rootProject.ext.dependencies.picasso_transformations,
            rootProject.ext.dependencies.timber,
            rootProject.ext.dependencies.koin,
            rootProject.ext.dependencies.retrofit,
            rootProject.ext.dependencies.retrofit_converter_gson,
            rootProject.ext.dependencies.okhttp_interceptor,
            rootProject.ext.dependencies.mock_web_server,
            rootProject.ext.dependencies.leakcanary,
            rootProject.ext.dependencies.coroutines,
            rootProject.ext.dependencies.gson,
            rootProject.ext.dependencies.tapadoo,
            rootProject.ext.dependencies.koinScope,
            rootProject.ext.dependencies.setetho,
    )

    debugImplementation(
            rootProject.ext.dependencies.leakcanary
    )
}
